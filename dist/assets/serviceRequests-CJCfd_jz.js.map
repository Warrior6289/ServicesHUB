{"version":3,"file":"serviceRequests-CJCfd_jz.js","sources":["../../src/mocks/serviceRequests.ts"],"sourcesContent":["import type { ServiceRequest } from '../types/serviceRequest';\r\n\r\n// Mock locations in a fictitious city area\r\nconst mockLocations = [\r\n  { lat: 40.7128, lng: -74.0060, address: '123 Main St, New York, NY 10001' },\r\n  { lat: 40.7580, lng: -73.9855, address: '456 Park Ave, New York, NY 10022' },\r\n  { lat: 40.7489, lng: -73.9680, address: '789 Broadway, New York, NY 10003' },\r\n  { lat: 40.7614, lng: -73.9776, address: '321 5th Ave, New York, NY 10016' },\r\n  { lat: 40.7282, lng: -73.7949, address: '654 Queens Blvd, Queens, NY 11375' },\r\n  { lat: 40.6782, lng: -73.9442, address: '987 Atlantic Ave, Brooklyn, NY 11238' },\r\n];\r\n\r\nconst categories = [\r\n  { id: 'plumber', name: 'Plumber' },\r\n  { id: 'electrician', name: 'Electrician' },\r\n  { id: 'welder', name: 'Welder' },\r\n  { id: 'carpenter', name: 'Carpenter' },\r\n  { id: 'hvac', name: 'HVAC' },\r\n  { id: 'painter', name: 'Painter' },\r\n];\r\n\r\nconst descriptions = [\r\n  'Emergency leak in kitchen sink, need immediate help',\r\n  'Installing new ceiling fan in living room',\r\n  'Metal gate repair needed for front entrance',\r\n  'Custom bookshelf installation required',\r\n  'AC not cooling properly, needs inspection',\r\n  'Bathroom plumbing issue, toilet won\\'t flush',\r\n  'Need electrical outlet installed in garage',\r\n  'Welding work for metal railings',\r\n  'Kitchen cabinet repair and adjustment',\r\n  'Annual HVAC maintenance and cleaning',\r\n];\r\n\r\nfunction randomItem<T>(array: T[]): T {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\nfunction randomDate(daysAgo: number, daysAhead: number): string {\r\n  const now = Date.now();\r\n  const min = now - (daysAgo * 24 * 60 * 60 * 1000);\r\n  const max = now + (daysAhead * 24 * 60 * 60 * 1000);\r\n  return new Date(min + Math.random() * (max - min)).toISOString();\r\n}\r\n\r\nfunction createMockRequest(\r\n  id: string,\r\n  type: 'instant' | 'scheduled',\r\n  status: ServiceRequest['status']\r\n): ServiceRequest {\r\n  const category = randomItem(categories);\r\n  const location = randomItem(mockLocations);\r\n  const initialPrice = Math.round((50 + Math.random() * 200) * 100) / 100;\r\n  const createdAt = randomDate(5, 0);\r\n  const currentPrice = status === 'price_boosted' \r\n    ? Math.round((initialPrice * 1.2 + Math.random() * 50) * 100) / 100\r\n    : initialPrice;\r\n\r\n  const baseRequest: ServiceRequest = {\r\n    id,\r\n    buyerId: `buyer_${Math.random().toString(36).slice(2, 9)}`,\r\n    buyerName: randomItem(['John Doe', 'Jane Smith', 'Alice Johnson', 'Bob Williams', 'Carol Brown']),\r\n    buyerLocation: location,\r\n    categoryId: category.id,\r\n    categoryName: category.name,\r\n    type,\r\n    status,\r\n    description: randomItem(descriptions),\r\n    initialPrice,\r\n    currentPrice,\r\n    priceHistory: status === 'price_boosted' \r\n      ? [\r\n          { price: initialPrice, timestamp: createdAt },\r\n          { price: currentPrice, timestamp: new Date(new Date(createdAt).getTime() + 15 * 60 * 1000).toISOString() }\r\n        ]\r\n      : [{ price: initialPrice, timestamp: createdAt }],\r\n    createdAt,\r\n    updatedAt: status === 'price_boosted' \r\n      ? new Date(new Date(createdAt).getTime() + 15 * 60 * 1000).toISOString()\r\n      : createdAt,\r\n  };\r\n\r\n  if (type === 'instant') {\r\n    baseRequest.broadcastRadius = 5 + Math.floor(Math.random() * 45); // 5-50 km\r\n    baseRequest.expiresAt = new Date(new Date(createdAt).getTime() + 60 * 60 * 1000).toISOString(); // 1 hour\r\n  } else {\r\n    baseRequest.scheduledDate = randomDate(0, 7);\r\n    baseRequest.scheduledTimeSlot = randomItem([\r\n      '9:00 AM - 11:00 AM',\r\n      '11:00 AM - 1:00 PM',\r\n      '1:00 PM - 3:00 PM',\r\n      '3:00 PM - 5:00 PM',\r\n      '5:00 PM - 7:00 PM',\r\n    ]);\r\n  }\r\n\r\n  if (['accepted', 'in_progress', 'completed'].includes(status)) {\r\n    baseRequest.acceptedBy = `seller_${Math.random().toString(36).slice(2, 9)}`;\r\n    baseRequest.acceptedAt = new Date(new Date(createdAt).getTime() + 30 * 60 * 1000).toISOString();\r\n  }\r\n\r\n  return baseRequest;\r\n}\r\n\r\nexport const mockServiceRequests: ServiceRequest[] = [\r\n  createMockRequest('req_1', 'instant', 'pending'),\r\n  createMockRequest('req_2', 'instant', 'pending'),\r\n  createMockRequest('req_3', 'instant', 'price_boosted'),\r\n  createMockRequest('req_4', 'instant', 'accepted'),\r\n  createMockRequest('req_5', 'instant', 'in_progress'),\r\n  createMockRequest('req_6', 'scheduled', 'pending'),\r\n  createMockRequest('req_7', 'scheduled', 'accepted'),\r\n  createMockRequest('req_8', 'scheduled', 'completed'),\r\n  createMockRequest('req_9', 'instant', 'completed'),\r\n  createMockRequest('req_10', 'scheduled', 'cancelled'),\r\n];\r\n\r\n// Helper to get requests by status\r\nexport function getMockRequestsByStatus(status: ServiceRequest['status']): ServiceRequest[] {\r\n  return mockServiceRequests.filter(req => req.status === status);\r\n}\r\n\r\n// Helper to get instant requests only\r\nexport function getMockInstantRequests(): ServiceRequest[] {\r\n  return mockServiceRequests.filter(req => req.type === 'instant' && ['pending', 'price_boosted'].includes(req.status));\r\n}\r\n\r\n// Helper to get user requests (buyer perspective)\r\nexport function getMockUserRequests(limit?: number): ServiceRequest[] {\r\n  const requests = [...mockServiceRequests].sort((a, b) => \r\n    new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n  );\r\n  return limit ? requests.slice(0, limit) : requests;\r\n}\r\n\r\n// Helper to get seller requests\r\nexport function getMockSellerRequests(): ServiceRequest[] {\r\n  return mockServiceRequests.filter(req => \r\n    ['accepted', 'in_progress', 'completed'].includes(req.status)\r\n  );\r\n}\r\n\r\n"],"names":["mockLocations","lat","lng","address","categories","id","name","descriptions","randomItem","array","Math","floor","random","length","randomDate","daysAgo","daysAhead","now","Date","min","max","toISOString","createMockRequest","type","status","category","location","initialPrice","round","createdAt","currentPrice","baseRequest","buyerId","toString","slice","buyerName","buyerLocation","categoryId","categoryName","description","priceHistory","price","timestamp","getTime","updatedAt","broadcastRadius","expiresAt","scheduledDate","scheduledTimeSlot","includes","acceptedBy","acceptedAt","mockServiceRequests","getMockInstantRequests","filter","req","getMockUserRequests","limit","requests","sort","a","b"],"mappings":"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"}